const Reservation = require('../models/reservation'); 
const Catway = require('../models/catways');

// ‚úÖ Lister toutes les r√©servations pour un catway
exports.getAll = async (req, res, next) => {
    try {
        console.log("üì• Route GET /catways/:id/reservations appel√©e");
        const catwayId = req.params.id;
        const catway = await Catway.findById(catwayId);

        if (!catway) 
            console.log("‚ùå Catway non trouv√© pour ID :", id);
            return res.status(404).json({ message: "Catway non trouv√©" });
        
        const reservations = await Reservation.find({ catwayNumber: catway.catwayNumber });
        console.log("‚úÖ R√©servations trouv√©es :", reservations.length);

        return res.render('reservation', {
            title: 'Liste des r√©servations',
            reservation: reservations,
            catway
        });
    } catch (error) {
        console.error("üî• Erreur dans getAll:", error);
        return res.status(500).json({ message: "Erreur serveur", error });
    }
};

// ‚úÖ D√©tails d'une r√©servation sp√©cifique
exports.getById = async (req, res, next) => {
    const catwayId = req.params.id;
    const idReservation = req.params.idReservation;

    try {
        const catway = await Catway.findById(catwayId);
        if (!catway) return res.status(404).json({ message: "Catway non trouv√©" });

        const reservation = await Reservation.findById(idReservation);
        if (!reservation) return res.status(404).json({ message: "R√©servation non trouv√©e" });

        return res.render('reservationInfo', {
            title: 'Info de r√©servation',
            reservation,
            catway
        });
    } catch (error) {
        return res.status(500).json({ message: "Erreur serveur", error });
    }
};

// ‚úÖ Cr√©er une r√©servation li√©e √† un catway
exports.add = async (req, res, next) => {
    const catwayId = req.params.id;

    try {
        const catway = await Catway.findById(catwayId);
        if (!catway) return res.status(404).json({ message: "Catway non trouv√©" });

        const data = {
            ReservationId: req.body.ReservationId,
            catwayNumber: catway.catwayNumber,
            clientName: req.body.clientName,
            boatName: req.body.boatName,
            startDate: req.body.startDate,
            endDate: req.body.endDate
        };

        const reservation = await Reservation.create(data);
        return res.status(201).json({ message: "R√©servation cr√©√©e avec succ√®s", reservation });
    } catch (error) {
        return res.status(500).json({ message: "Erreur lors de la cr√©ation de la r√©servation", error });
    }
};

// ‚úÖ Modifier une r√©servation existante
exports.update = async (req, res, next) => {
    const catwayId = req.params.id;
    const reservationId = req.params.idReservation;

    try {
        const catway = await Catway.findById(catwayId);
        if (!catway) return res.status(404).json({ message: "Catway non trouv√©" });

        const reservation = await Reservation.findById(reservationId);
        if (!reservation) return res.status(404).json({ message: "R√©servation non trouv√©e" });

        const updates = {
            ReservationId: req.body.ReservationId,
            catwayNumber: catway.catwayNumber,
            clientName: req.body.clientName,
            boatName: req.body.boatName,
            startDate: req.body.startDate,
            endDate: req.body.endDate
        };

        Object.keys(updates).forEach((key) => {
            if (updates[key] !== undefined) reservation[key] = updates[key];
        });

        await reservation.save();
        return res.status(200).json({ message: "R√©servation mise √† jour", reservation });
    } catch (error) {
        return res.status(500).json({ message: "Erreur lors de la mise √† jour", error });
    }
};

// ‚úÖ Supprimer une r√©servation
exports.delete = async (req, res, next) => {
    const catwayId = req.params.id;
    const reservationId = req.params.idReservation;

    try {
        const catway = await Catway.findById(catwayId);
        if (!catway) return res.status(404).json({ message: "Catway non trouv√©" });

        await Reservation.findByIdAndDelete(reservationId);

        return res.status(204).json({ message: "R√©servation supprim√©e" });
    } catch (error) {
        return res.status(500).json({ message: "Erreur lors de la suppression", error });
    }
};
